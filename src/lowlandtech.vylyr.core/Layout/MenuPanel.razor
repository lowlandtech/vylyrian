@inject GraphContext Db
@inject AppVm App

<MudPaper Class="menu-panel pa-0">
    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="px-4 py-2">
        @if (ShowBack)
        {
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="OnBack" Class="pl-1" />
        }
        else
        {
            <div></div>
        }
        @if (App.IsMobile)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="OnClose"/>
        }
    </MudStack>

    <MudList T="GraphNode">
        @if (_children == null)
        {
            <MudProgressCircular />
        }
        else
        {
            @foreach (var child in _children)
            {
                @if (child.ChildCount > 0)
                {
                    <MudListItem OnClick="() => OnNavigate.InvokeAsync(child)" Class="pl-5">
                        <div style="display: flex; align-items: center; width: 100%;">
                            <MudIcon Icon="@child.Type.Icon" />
                            <MudText Class="ml-2">@child.Title</MudText>
                            @if (child.ChildCount > 0)
                            {
                                <MudBadge Class="mt-4 mr-4" Content="@child.ChildCount" Color="Color.Primary" Style="margin-left: auto;"/>
                            }
                        </div>
                    </MudListItem>
                }
                else
                {
                    <MudListItem OnClick="() => App.SetActiveNode(child)" Class="pl-5">
                        <div style="display: flex; align-items: center; width: 100%;">
                            <MudIcon Icon="@child.Type.Icon" />
                            <MudText Class="ml-2">@child.Title</MudText>
                        </div>
                    </MudListItem>
                }
            }
        }
    </MudList>
</MudPaper>

@code {
    [Parameter] public GraphNode CurrentNode { get; set; } = default!;
    [Parameter] public EventCallback<GraphNode> OnNavigate { get; set; }
    [Parameter] public EventCallback OnBack { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public bool ShowBack { get; set; } = true;

    private List<GraphNodeWithCount>? _children;

    protected override async Task OnInitializedAsync()
    {
        _children = await Db.Edges
            .Where(e => e.FromId == CurrentNode.Id)
            .Select(e => e.To)
            //.Where(n => n.TypeId == "list")
            .Select(n => new GraphNodeWithCount
            {
                Id = n.Id,
                Title = n.Title,
                Type = n.Type,
                Route = n.Route,
                ChildCount = Db.Edges.Count(e => e.FromId == n.Id)
            })
            .ToListAsync();
    }

    private async Task TryNavigate(GraphNodeWithCount node)
    {
        if (node.ChildCount > 0)
        {
            await OnNavigate.InvokeAsync(node);
        }
    }

    private class GraphNodeWithCount : GraphNode
    {
        public int ChildCount { get; set; }
    }
}