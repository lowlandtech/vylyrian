@inherits LayoutComponentBase
@inject AppVm App

<MudThemeProvider Theme="@App.Theme" IsDarkMode="@App.IsDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudBreakpointProvider OnBreakpointChanged="@HandleBreakpointChanged" />

<MudLayout>

    <MudAppBar Elevation="1" Dense="true">
        <MudIconButton 
        Icon="@Icons.Material.Filled.Menu"
        Color="Color.Inherit"
        Edge="Edge.Start"
        OnClick="@App.ToggleDrawer" />
        <MudText Typo="Typo.h5" Class="ml-3">Vylyr</MudText>
        <MudSpacer />
        <MudIconButton 
        Icon="@App.DarkLightModeButtonIcon" 
        Color="Color.Inherit"
        OnClick="App.ToggleDarkMode" />
    </MudAppBar>

    <MudDrawer @bind-Open="@App.DrawerOpen"
        Width="300px"
        Elevation="2"
        Class="mud-drawer-custom"
        ClipMode="DrawerClipMode.Always">
        <SlidingNavMenu />
    </MudDrawer>

    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>

</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<style>
    @@media (max-width: 960px) {
        .mud-drawer-custom.mud-drawer--open

    {
        width: 100% !important;
        max-width: 100% !important;
    }

    .mud-drawer-custom.mud-drawer--close {
        transition: width 0.3s ease, height 0.3s ease;
    }

    }

    .menu-container {
        overflow: hidden;
        position: relative;
        width: 100%;
    }

    .menu-panel-wrapper {
        display: flex;
        flex-direction: row;
        transition: transform 0.3s ease;
        width: 100%;
    }

    .menu-panel {
        width: 100%;
        flex-shrink: 0;
    }
</style>

@code {

    /// <summary>
    /// Initializes the app state manager.
    /// </summary>
    /// <param name="breakpoint"></param>
    /// <returns></returns>
    public Task HandleBreakpointChanged(Breakpoint breakpoint)
    {
        App.IsMobile = breakpoint <= Breakpoint.Xs; // or Breakpoint.Md if you prefer

        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        App.OnChange += () => InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        App.OnChange -= () => InvokeAsync(StateHasChanged);
    }
}
