@inherits LayoutComponentBase
@inject AppVm App

<MudThemeProvider Theme="@App.Theme" IsDarkMode="@App.IsDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>

    <MudAppBar Elevation="1" Dense="true">
        <MudIconButton 
            Icon="@Icons.Material.Filled.Menu"
            Color="Color.Inherit"
            Edge="Edge.Start"
            OnClick="@App.ToggleDrawer" />
        <MudText Typo="Typo.h5" Class="ml-3">Vylyr</MudText>
        <MudSpacer />
        <MudIconButton 
            Icon="@DarkLightModeButtonIcon" 
            Color="Color.Inherit"
            OnClick="App.ToggleDarkMode" />
    </MudAppBar>

    <MudDrawer @bind-Open="@App.DrawerOpen"
        Elevation="2"
        Class="mud-drawer-custom"
        Overlay="true"
        Variant="DrawerVariant.Temporary">
        <SlidingNavMenu />
    </MudDrawer>

    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>

</MudLayout>

<style>
    @@media (max-width: 960px) {
        .mud-drawer-custom.mud-drawer--open {
            width: 100% !important;
            max-width: 100% !important;
        }

        .mud-drawer-custom.mud-drawer--close {
            transition: width 0.3s ease, height 0.3s ease;
        }
    }
    .menu-container {
        overflow: hidden;
        position: relative;
        width: 100%;
    }

    .menu-panel-wrapper {
        display: flex;
        flex-direction: row;
        transition: transform 0.3s ease;
        width: 100%;
    }

    .menu-panel {
        width: 100%;
        flex-shrink: 0;
    }
</style>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    public string DarkLightModeButtonIcon => App.IsDarkMode
        ? Icons.Material.Rounded.AutoMode
        : Icons.Material.Outlined.DarkMode;

    protected override void OnInitialized()
    {
        App.OnChange += () => InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        App.OnChange -= () => InvokeAsync(StateHasChanged);
    }
}
