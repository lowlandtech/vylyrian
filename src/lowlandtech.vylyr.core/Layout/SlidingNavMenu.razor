
@inject GraphContext Db

@if (_user != null)
{
    <MudPaper Class="menu-container">
        <div class="menu-panel-wrapper" style="transform: translateX(@(-100 * (_stack.Count - 1))%);">
            @for (int i = 0; i < _stack.Count; i++)
            {
                <MenuPanel CurrentNode="_stack[i]"
                           OnNavigate="Push"
                           OnBack="Pop"
                           OnClose="CloseMenu"
                           ShowBack="@(i > 0)" />
            }
        </div>
    </MudPaper>
}
else
{
    <MudProgressCircular />
}

@code {
    private List<GraphNode> _stack = new();
    private GraphNode? _user;

    protected override async Task OnInitializedAsync()
    {
        _user = await Db.Nodes.FirstOrDefaultAsync(n => n.Type == "user");
        if (_user != null) _stack.Add(_user);
    }

    private void Push(GraphNode node) => _stack.Add(node);
    private void Pop() { if (_stack.Count > 1) _stack.RemoveAt(_stack.Count - 1); }

    private void CloseMenu()
    {
        _stack.Clear(); // or trigger close logic in MainLayout if the menu is in a drawer
    }
}