@inherits LayoutComponentBase
@inject AppVm App

<MudBreakpointProvider OnBreakpointChanged="@HandleBreakpointChanged" />
<MudThemeProvider Theme="@App.Theme" IsDarkMode="@App.IsDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <!-- AppBar -->
    <MudAppBar Elevation="1" Dense="true">
        <MudIconButton 
            Color="Color.Inherit"
            Class="ml-n4 mr-1 drawer-toggle"
            Style="transition: transform 0.3s ease;"
            OnClick="@App.ToggleDrawer">
            <MudIcon Icon="@_drawerIcon" Class="drawer-icon" />
        </MudIconButton>
        <MudText Typo="Typo.h5" Class="ml-3">Vylyr</MudText>
        <MudSpacer />
        <MudIconButton Icon="@App.DarkLightModeButtonIcon"
                       Color="Color.Inherit"
                       OnClick="App.ToggleDarkMode" />
    </MudAppBar>

    <!-- Drawer / Sidebar -->
    <MudDrawer @bind-Open="App.DrawerOpen"
               Class="mud-drawer-custom h-100"
               Overlay="true"
               Variant="@(App.IsMobile ? DrawerVariant.Temporary : DrawerVariant.Responsive)"
               Width="@(App.IsMobile ? "100%" : "350px")"
               Anchor="Anchor.Left"
               Elevation="1"
               ClipMode="DrawerClipMode.Always">
        <SlidingNavMenu />
    </MudDrawer>

    <!-- Main Content -->
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private string _drawerIcon => App.DrawerOpen ? Icons.Material.Filled.Close : Icons.Material.Filled.Menu;

    protected override void OnInitialized()
    {
        App.OnChange += () => InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        App.OnChange -= () => InvokeAsync(StateHasChanged);
    }

    public Task HandleBreakpointChanged(Breakpoint breakpoint)
    {
        if (App.IsNativeMobile) return Task.CompletedTask;

        App.IsMobile = breakpoint <= Breakpoint.Sm;
        App.DrawerOpen = !App.IsMobile;
        StateHasChanged();
        return Task.CompletedTask;
    }
}

<style>
    @@media (max-width: 960px) {
        .mud-drawer-custom.mud-drawer--open {
            width: 100% !important;
            max-width: 100% !important;
        }

        .mud-drawer-custom.mud-drawer--close {
            transition: width 0.3s ease, height 0.3s ease;
        }
    }

    .mud-drawer-custom {
        height: 100% !important;
    }

    .menu-container {
        overflow: hidden;
        position: relative;
        width: 100%;
        height: 100% !important;
    }

    .menu-panel-wrapper {
        display: flex;
        flex-direction: row;
        transition: transform 0.3s ease;
        width: 100%;
        height: 100% !important;
    }

    .menu-panel {
        width: 100%;
        flex-shrink: 0;
    }

    .drawer-toggle {
        transition: all 0.25s ease;
    }

    .drawer-icon {
        font-size: 24px;
        transition: transform 0.25s ease, opacity 0.25s ease;
    }

    .drawer-toggle:hover .drawer-icon {
        transform: rotate(90deg);
    }

</style>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
